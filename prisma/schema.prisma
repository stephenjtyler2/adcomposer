// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Tenant {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  hostname String  @unique
  users   User[]
  library Library?
}

// Identities and Users
// ====================

// Identities are universal in the world.   An identity is managed by an IdentityProvider (IDP) which manages its profile and authentication credentials and provices a means of authenticating the identity 
// in a way that this app will trust.    IDPs include Google Sign In, Okta, OneLogin, Auth0, Apple Id, Facebook, and various others.   This app can integrate to them or it can provide its own identity management and act as an IDP to itself.
// The info we need to store about an identity is info imported from the IDP profile (name, email, avatar image etc.), which IDP it came from, and its unique id as assigned by that IDP.

// Users are tenant scoped objects within this app.   They can have permissions attached to them that control what they can do in the app.   All records of what someone does in the app attach to a User record, not an identity.
// Users do not login, identities do.   But once they've logged in the actor doing stuff in the app is a user, not an identity.

// We maintain a mapping between identities and users so we know what user context to establish when a given identity logs in.    
// A single identity can map to multiple users across tenants in this app, but it cannot map to more than one user in any given tenant. 
// Thus, the identity fred@gmail.com can login to tenant 1 and map to the user {t:1, u:34} but if they login in to tenant 2 they could be {t:2, u:43} which is a totally different user as far as the app is concerned
// even though the creds to login and authentication method were the same in both cases.


model Identity {
  id             Int     @id @default(autoincrement())   // local unique id
  idpUrl         String?                                 // the url of the idp endpoint managing this identity and its auth mechanism ( null for locally managed identities ).
  idpIdentityId  String?                                 // the user_id the IDP uses to identify this identity ( null for locally managed identities ).

  users          User[]                                  // the associated applicaiton users (max 1 per tenant, typically just 1 globally)

  // standard OpenIDConnect profile fields that most IDPs will provide on the profile.   Locally managed identities - will only have a few of these set (name, email, picture)
  idpProfileName           String?                       // the name used for general display purposes e.g. (Jane Smith)
  idpProfileFamilyName     String  @default("")       
  idpProfileMiddleName     String  @default("")
  idpProfileGivenName      String @default("")
  idpProfileNickname       String @default("")
  idpProfileUpdatedAt      DateTime?
  idpProfileEmail          String @default("")
  idpProfileEmailVerified  Boolean  @default(false)
  idpProfilePictureUrl     String?

  // for local users, this app manages the identity and the auth (login) process, for which we also need the username and password.
  // For externally managed identities we don't need this as the idp will handle the auth process. 
  authUsername             String? @unique        // the identifier user for authentication / login (often an eamil address but does not have to be - just needs to be globally unique - i.e. unique across ALL tenants)
  authPasswordHash         String?                // SHA256 hash of the user's password with their salt appended to it (which makes two users with the same password have different stored hashes)
  authSalt                 String @default("salt") // random 4 character string generated when the identity is created.   Appended to the password before it is hashed and stored.
}

model User {
  id            Int          @id @default(autoincrement())
  tenant        Tenant       @relation(fields: [tenantId], references: [id])
  tenantId      Int
  identity      Identity?    @relation(fields: [identityId], references: [id])
  identityId    Int?
  permissions   Permission[]
  createdImages Image[]
  @@unique([tenantId, identityId]) // an identity can map to multiple users across tenants but only to one user in any given tenant.  Combo of tenantId/identityId should be unique.
}

model Permission {
  id       Int     @id @default(autoincrement())
  resource String
  create   Boolean
  read     Boolean
  update   Boolean
  delete   Boolean
  execute  Boolean
  users    User[]
}

// Creative Asset Management
// =========================

model Library {
  id       Int     @id @default(autoincrement())
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  tenantId Int     @unique
  images   Image[]
  ads      AdSet[]
}

enum ImageOrigin {
  Generated
  Uploaded
}

enum ImageType {
  Backgrounds
  Object
}
enum ImageCreationStatus {
  Pending
  Complete
  Failed
}

// An image object represents an image file in the blobstore.   In the case of generated images, they may or may not have been added to a library.
// We only keep generated images for 2 days unless they have been added to a library.
model Image {
  id                   Int         @id @default(autoincrement())
  imageType            ImageType   @default(value: Backgrounds)
  imageOrigin          ImageOrigin
  prompt               String?
  createDate           DateTime?
  createStatus         ImageCreationStatus
  createdBy            User        @relation(fields: [createdById], references: [id])
  createdById          Int
  imgUrl               String      // full url includes bucket name and s3 base uri components.  e.g. https://mybucket.s3.amazonaws.com/path1/path2/myfile.bmp
  path                 String      // just the object name - e.g. path1/path2/myfile.bmp
  adsUsingAsBackground Ad[]        @relation("BackgroundsInAds")
  adsUsingAsObject     Ad[]        @relation("ObjectsInAds")
  tags                 Tag[]
  Library              Library?    @relation(fields: [libraryId], references: [id])
  libraryId            Int?
}

// Tags have a m:m relationship with assets (images for now, later other asset types like widgets) and ads
model Tag {
  id     Int     @id @default(autoincrement())
  name   String
  images Image[]
  ads    Ad[]
}

// Ads and Campaigns
// =================

enum AdType {
  StaticImage
  DynamicWeb
  Social
}

model AdSet {
  id        Int      @id @default(autoincrement())
  type      AdType
  name      String
  ads       Ad[]
  Library   Library? @relation(fields: [libraryId], references: [id])
  libraryId Int?
}

model Ad {
  id                Int          @id @default(autoincrement())
  adSet             AdSet        @relation(fields: [adSetId], references: [id])
  adSetId           Int
  targetMarket      String
  languageCode      String
  background        Image?       @relation("BackgroundsInAds", fields: [backgroundImageId], references: [id])
  backgroundImageId Int?
  objects           Image[]      @relation("ObjectsInAds")
  textAreas         AdTextArea[]
  ctaButton         AdCTAButton?
  Tag               Tag?         @relation(fields: [tagId], references: [id])
  tagId             Int?
}

enum FontWeight {
  Standard
  Bold
}

enum FontStyle {
  Standard
  Italic
}

enum TextAlign {
  Left
  Right
  Center
}

enum TextVerticalAlign {
  Top
  Bottom
  Center
}

model AdTextArea {
  id                Int               @id @default(autoincrement())
  ad                Ad                @relation(fields: [adId], references: [id])
  adId              Int               @unique
  text              String
  textAlign         TextAlign
  textVerticalAlign TextVerticalAlign
  font              String
  fontWeight        FontWeight
  fontStyle         FontStyle
  posX              Int
  posY              Int
  width             Int
  height            Int
}

model AdCTAButton {
  id           Int        @id @default(autoincrement())
  ad           Ad         @relation(fields: [adId], references: [id])
  adId         Int        @unique
  fillColor    String
  outlineColor String
  textColor    String
  text         String
  font         String
  fontWeight   FontWeight
  fontStyle    FontStyle
  targetUrl    String
  posX         Int
  posY         Int
  width        Int
  height       Int
}
