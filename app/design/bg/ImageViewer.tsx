import React from 'react';

import { Box, Typography, LinearProgress, Button, Stack} from '@mui/material';
import { ApiImage } from '@backend/apitypes';
import DeleteIcon from '@mui/icons-material/Delete';
import DownloadIcon from '@mui/icons-material/Download';
type Props = {
    noImageText: string,
    imageGenerationPending: boolean,
    imageInfo: ApiImage | undefined,
    onSaveToLibrary: () => void,  
    onRemoveFromLibrary: () => void, 
}

const userId=1;  // hardcoding for now until I implement login / user context

export default function ImageViewer({ noImageText, imageGenerationPending, imageInfo, onSaveToLibrary, onRemoveFromLibrary}: Props) {

    const handleSaveImageToLibrary = () => {
        onSaveToLibrary();
    }
    const handleRemoveImageFromLibrary = () => {
        onRemoveFromLibrary();
    }

    const renderProgress = () => (
        <Box sx={{ display: "flex", justifyContent: "center", alignItems: "center", height: "100%", width: "100%" }}>
            <Box>
                <Typography variant="body1">Image Generation In Progress.</Typography>
                <LinearProgress />
            </Box>
        </Box>
    );



    const renderNoImageText = () => (
        <Box sx={{ display: "flex", justifyContent: "center", alignItems: "center", height: "100%", width: "100%" }}>
            <Box>
                {imageInfo && imageInfo.createStatus == "Failed" &&
                    <center><Typography variant='h5' color="red">Image generation failed.</Typography></center>
                }
                <Typography variant='body1'>{noImageText}</Typography>
            </Box>
        </Box>
    );

    const renderImage = (info: ApiImage) => {
        return (
            <Box sx={{ display: "flex", justifyContent: "center" }}>
                <Box sx={{ border: 1, p: 1, mr: 3 }}>
                    <Box component="img" sx ={{
                        maxWidth:500,
                        maxHeight:500 
                    }} 
                    src={info.imgUrl} />
                </Box>
                <Box sx={{ flexGrow: 1 }}>
                    {renderMetadata(info)}
                    {renderActions(info)}
                </Box>

            </Box>
        );
    }

    const renderMetadata = (info: ApiImage) => (
        <Box>
            <Typography variant="h6">Image Info</Typography>
            {info.createDate && 
            <Typography variant="body1">Date Created: {new Date(info.createDate).toLocaleString()} </Typography>
            }
            <Typography variant="body1">Generated By: {info.createdById == 1 ? "Stephen Tyler" : info.createdById} </Typography>
            {info.imageOrigin == "Uploaded" && <Typography variant="body1">Source: Uploaded </Typography>}
            {info.imageOrigin == "Generated" && <Typography variant="body1">AI Generated with Prompt: {info.prompt} </Typography>}
        </Box>

    );
    const renderActions = (info: ApiImage) => {
        const imageInLibrary = (info && info.libraryId);
        return (
            <Stack direction="row" spacing={1} sx={{ my: 1 }}>
                {!imageInLibrary && <Button variant="contained" onClick={handleSaveImageToLibrary}>Save to Library</Button>}
                <Button variant="contained">Create Variations</Button>
                <Button variant="contained" color = "secondary"><DownloadIcon/></Button>
                {imageInLibrary && <Button variant="contained" color = "secondary" onClick = {handleRemoveImageFromLibrary}><DeleteIcon/></Button>}
            </Stack>
        );
    }

    if (imageGenerationPending) return renderProgress();
    if (imageInfo && imageInfo.createStatus != "Failed") return renderImage(imageInfo);  // i.e. no undefined - the prop might be, but this param is not
    return renderNoImageText();
}